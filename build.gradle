plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version libs.versions.benManes
    id 'com.gorylenko.gradle-git-properties' version libs.versions.gitProperties
    id 'com.bmuschko.docker-spring-boot-application' version libs.versions.docker
    id 'org.springframework.boot' version libs.versions.springBoot
    id 'io.spring.dependency-management' version libs.versions.springDependencyManagement
}

group = 'org.manko'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    implementation(libs.liquibase.core)
    implementation(libs.hypersistence)
    implementation(libs.mapstruct)
    implementation(libs.mapstruct.processor)
    implementation(libs.springdoc)
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor(libs.mapstruct.processor)
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation(libs.testcontainer)
    testImplementation(libs.easy.random)
    testImplementation(libs.faker)
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

checkstyle {
    toolVersion = "10.21.4"
    configFile = file("${rootProject.projectDir}/config/checkstyle/google_checks.xml")
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    keys = [
            "git.branch",
            "git.build.version",
            "git.commit.message.short",
            "git.commit.time",
            "git.commit.id",
            "git.commit.id.abbrev",
            "git.commit.message.full"
    ]
}

def dockerImageName = "manko.project.com/monitor-sensors"

def dockerImagePrefix = [
        "${dockerImageName}:${version}",
        "${dockerImageName}:latest"
]

docker {
    springBootApplication {
        maintainer = "manko"
        baseImage = "eclipse-temurin:21.0.4_7-jdk-jammy"
        ports = [8080, 8080]
        images = dockerImagePrefix
        jvmArgs = ["-Xmx384m"]
    }
}

tasks {
    jacocoTestReport {
        dependsOn("test")
        reports {
            html.required.set(true)
            xml.required.set(true)
            csv.required.set(false)
        }
        classDirectories.setFrom(
                files(
                        classDirectories.files.collect {
                            fileTree(it).exclude(
                                    "org/manko/monitorsensors/aspect/*",
                                    "org/manko/monitorsensors/config/*",
                                    "org/manko/monitorsensors/validation/*",
                                    "org/manko/monitorsensors/dto/*",
                                    "org/manko/monitorsensors/entity/*",
                                    "org/manko/monitorsensors/exception/*",
                                    "org/manko/monitorsensors/service/validator/*",
                                    "org/manko/monitorsensors/MonitorsensorsApplication"
                            )
                        }
                )
        )
        finalizedBy("jacocoTestCoverageVerification")
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = BigDecimal.valueOf(0.3)
                }
            }
        }
    }

    test {
        useJUnitPlatform()

        finalizedBy("jacocoTestReport")
    }
}
